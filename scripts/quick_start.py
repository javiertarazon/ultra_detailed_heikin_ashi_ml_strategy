#!/usr/bin/env python3
"""
üöÄ Bot Trader Copilot - Script de Inicio R√°pido
===============================================

Este script facilita la configuraci√≥n inicial y ejecuci√≥n del sistema.

Uso:
    python quick_start.py

Opciones:
    --setup     : Configurar el entorno por primera vez
    --test      : Ejecutar tests b√°sicos
    --demo      : Ejecutar demo con datos de ejemplo
    --help      : Mostrar esta ayuda
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

class QuickStart:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.required_files = [
            "requirements.txt",
            "config/config.example.yaml",
            "README.md"
        ]

    def check_requirements(self):
        """Verificar que todos los archivos necesarios est√©n presentes"""
        print("üîç Verificando archivos del proyecto...")

        missing_files = []
        for file in self.required_files:
            if not (self.project_root / file).exists():
                missing_files.append(file)

        if missing_files:
            print(f"‚ùå Archivos faltantes: {missing_files}")
            return False

        print("‚úÖ Todos los archivos necesarios est√°n presentes")
        return True

    def setup_environment(self):
        """Configurar el entorno virtual y dependencias"""
        print("üîß Configurando entorno...")

        # Crear entorno virtual
        if not Path("trading_bot_env").exists():
            print("üì¶ Creando entorno virtual...")
            subprocess.run([sys.executable, "-m", "venv", "trading_bot_env"], check=True)

        # Activar entorno virtual
        if os.name == 'nt':  # Windows
            activate_script = self.project_root / "trading_bot_env" / "Scripts" / "activate.bat"
            python_exe = self.project_root / "trading_bot_env" / "Scripts" / "python.exe"
        else:  # Unix/Linux
            activate_script = self.project_root / "trading_bot_env" / "bin" / "activate"
            python_exe = self.project_root / "trading_bot_env" / "bin" / "python"

        # Instalar dependencias
        print("üì• Instalando dependencias...")
        subprocess.run([str(python_exe), "-m", "pip", "install", "--upgrade", "pip"], check=True)
        subprocess.run([str(python_exe), "-m", "pip", "install", "-r", "requirements.txt"], check=True)

        print("‚úÖ Entorno configurado exitosamente")

    def setup_config(self):
        """Configurar archivo de configuraci√≥n b√°sico"""
        print("‚öôÔ∏è Configurando archivo de configuraci√≥n...")

        config_dir = self.project_root / "config"
        config_dir.mkdir(exist_ok=True)

        example_config = config_dir / "config.example.yaml"
        user_config = config_dir / "config.yaml"

        if not user_config.exists():
            print("üìã Creando archivo de configuraci√≥n b√°sico...")
            # Aqu√≠ ir√≠a la l√≥gica para crear un config b√°sico
            print("‚ö†Ô∏è  Recuerda configurar tus API keys en config/config.yaml")
        else:
            print("‚úÖ Archivo de configuraci√≥n ya existe")

    def run_tests(self):
        """Ejecutar tests b√°sicos"""
        print("üß™ Ejecutando tests...")

        try:
            # Verificar imports b√°sicos
            subprocess.run([sys.executable, "-c", "import pandas, numpy, ccxt; print('‚úÖ Imports b√°sicos OK')"], check=True)

            # Verificar TA-Lib
            try:
                subprocess.run([sys.executable, "-c", "import talib; print('‚úÖ TA-Lib OK')"], check=True)
            except subprocess.CalledProcessError:
                print("‚ö†Ô∏è  TA-Lib no disponible (opcional)")

            # Verificar MT5
            try:
                subprocess.run([sys.executable, "-c", "import MetaTrader5 as mt5; print(f'‚úÖ MT5 v{mt5.__version__} OK')"], check=True)
            except subprocess.CalledProcessError:
                print("‚ö†Ô∏è  MT5 no disponible (opcional para acciones)")

            print("‚úÖ Tests b√°sicos completados")

        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error en tests: {e}")
            return False

        return True

    def run_demo(self):
        """Ejecutar demo con datos de ejemplo"""
        print("üéØ Ejecutando demo...")

        # Aqu√≠ ir√≠a la l√≥gica para ejecutar una demo
        print("‚ö†Ô∏è  Demo no implementada a√∫n")
        print("üí° Ejecuta: python descarga_datos/main.py")

    def show_help(self):
        """Mostrar ayuda"""
        print(__doc__)

def main():
    parser = argparse.ArgumentParser(description="Bot Trader Copilot - Inicio R√°pido")
    parser.add_argument("--setup", action="store_true", help="Configurar entorno")
    parser.add_argument("--test", action="store_true", help="Ejecutar tests")
    parser.add_argument("--demo", action="store_true", help="Ejecutar demo")

    args = parser.parse_args()

    quickstart = QuickStart()

    # Verificar requisitos b√°sicos
    if not quickstart.check_requirements():
        print("‚ùå Requisitos no cumplidos. Verifica la instalaci√≥n.")
        sys.exit(1)

    # Ejecutar acciones seg√∫n argumentos
    if args.setup:
        quickstart.setup_environment()
        quickstart.setup_config()
    elif args.test:
        quickstart.run_tests()
    elif args.demo:
        quickstart.run_demo()
    else:
        quickstart.show_help()

if __name__ == "__main__":
    main()
