#!/usr/bin/env python3
"""
Script para optimizaci√≥n con datos de mercado LIVE
"""

import sys
import os
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime
from pathlib import Path

# Agregar directorio descarga_datos al path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.join(current_dir, 'descarga_datos'))

# Importaciones b√°sicas que no dependen de configuraci√≥n completa
try:
    from core.ccxt_live_data import CCXTLiveDataProvider
    CCXT_AVAILABLE = True
except ImportError:
    CCXT_AVAILABLE = False
    print("‚ö†Ô∏è CCXT no disponible")

class SimpleLiveOptimizer:
    """Optimizador simple que usa datos live directamente"""

    def __init__(self):
        self.symbol = 'BTC/USDT'
        self.timeframe = '15m'
        self.live_data_provider = None

    async def initialize_provider(self):
        """Inicializar proveedor de datos live con configuraci√≥n m√≠nima"""
        if not CCXT_AVAILABLE:
            print("‚ùå CCXT no disponible")
            return False

        try:
            # Usar CCXT directamente para datos p√∫blicos
            import ccxt
            self.exchange = ccxt.binance({
                'timeout': 30000,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'spot',
                },
            })

            print("‚úÖ Exchange Binance inicializado para datos p√∫blicos")
            return True

        except Exception as e:
            print(f"‚ùå Error inicializando exchange: {e}")
            return False

    async def download_live_data(self, bars=300):
        """Descargar datos live usando CCXT directamente"""
        try:
            print(f"üì• Descargando {bars} barras live de {self.symbol} {self.timeframe}...")

            # Obtener datos OHLCV directamente
            ohlcv = self.exchange.fetch_ohlcv(self.symbol, timeframe=self.timeframe, limit=bars)

            if not ohlcv or len(ohlcv) < 100:
                print(f"‚ùå Datos insuficientes: {len(ohlcv) if ohlcv else 0} barras")
                return None

            # Convertir a DataFrame
            import pandas as pd
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)

            print(f"‚úÖ Datos descargados: {len(df)} barras")
            print(f"üìÖ Per√≠odo: {df.index[0]} ‚Üí {df.index[-1]}")

            # Calcular indicadores b√°sicos
            df = self._calculate_basic_indicators(df)

            # Guardar datos
            data_path = Path("data/live_optimization_data")
            data_path.mkdir(exist_ok=True)

            filename = f"{self.symbol.replace('/', '_')}_{self.timeframe}_live_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(data_path / filename)
            print(f"üíæ Datos guardados en: {data_path / filename}")

            return df

        except Exception as e:
            print(f"‚ùå Error descargando datos: {e}")
            return None

    def _calculate_basic_indicators(self, df):
        """Calcular indicadores b√°sicos para an√°lisis"""
        try:
            # Calcular retornos
            df['returns'] = df['close'].pct_change()
            df['log_returns'] = np.log(df['close'] / df['close'].shift(1))

            # Calcular volatilidad (ATR aproximado)
            df['tr'] = np.maximum(
                df['high'] - df['low'],
                np.maximum(
                    abs(df['high'] - df['close'].shift(1)),
                    abs(df['low'] - df['close'].shift(1))
                )
            )
            df['atr'] = df['tr'].rolling(window=14).mean()

            # Calcular RSI aproximado
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['rsi'] = 100 - (100 / (1 + rs))

            # Calcular volumen ratio
            df['volume_ratio'] = df['volume'] / df['volume'].rolling(window=20).mean()

            return df

        except Exception as e:
            print(f"‚ö†Ô∏è Error calculando indicadores: {e}")
            return df

    def analyze_live_data(self, data):
        """An√°lisis b√°sico de los datos live y c√°lculo de par√°metros optimizados"""
        try:
            print("\nüìä AN√ÅLISIS DE DATOS LIVE")
            print("=" * 40)

            # Estad√≠sticas b√°sicas
            current_price = data['close'].iloc[-1]
            avg_volume = data['volume'].mean()
            current_atr = data['atr'].iloc[-1] if 'atr' in data.columns else data['tr'].rolling(14).mean().iloc[-1]
            current_rsi = data['rsi'].iloc[-1] if 'rsi' in data.columns else 50

            print(f"Precio actual: ${current_price:.2f}")
            print(f"Volumen promedio: {avg_volume:.2f}")
            print(f"Volatilidad (ATR): {current_atr:.4f}")
            print(f"RSI actual: {current_rsi:.2f}")

            # An√°lisis de tendencias
            recent_prices = data['close'].tail(20)
            trend = "ALCISTA" if recent_prices.iloc[-1] > recent_prices.iloc[0] else "BAJISTA"
            change_pct = ((recent_prices.iloc[-1] - recent_prices.iloc[0]) / recent_prices.iloc[0]) * 100

            print(f"Tendencia reciente (20 velas): {trend} ({change_pct:.2f}%)")

            # Calcular par√°metros optimizados basados en condiciones actuales
            optimized_params = self._calculate_optimized_parameters(data, current_price, current_atr, avg_volume)

            return optimized_params

        except Exception as e:
            print(f"‚ùå Error en an√°lisis: {e}")
            return None

    def _calculate_optimized_parameters(self, data, current_price, current_atr, avg_volume):
        """Calcular par√°metros optimizados basados en condiciones de mercado actuales"""
        try:
            print("\nüéØ C√ÅLCULO DE PAR√ÅMETROS OPTIMIZADOS")
            print("=" * 45)

            # Analizar volatilidad relativa
            atr_percentage = (current_atr / current_price) * 100
            print(f"Volatilidad relativa: {atr_percentage:.2f}%")

            # Ajustar par√°metros basados en volatilidad
            if atr_percentage > 1.0:  # Mercado muy vol√°til
                print("üìà Mercado de alta volatilidad detectado")
                risk_per_trade = 0.015  # Reducir riesgo
                atr_multiplier_sl = 2.0  # Stop loss m√°s amplio
                atr_multiplier_tp = 4.0  # Take profit m√°s amplio
                ml_threshold_min = 0.5   # ML confidence m√°s alto
                liquidity_min = 3        # Liquidez m√°s baja requerida

            elif atr_percentage > 0.5:  # Mercado moderadamente vol√°til
                print("üìä Mercado de volatilidad moderada")
                risk_per_trade = 0.02
                atr_multiplier_sl = 1.5
                atr_multiplier_tp = 3.0
                ml_threshold_min = 0.45
                liquidity_min = 4

            else:  # Mercado de baja volatilidad
                print("üìâ Mercado de baja volatilidad")
                risk_per_trade = 0.025
                atr_multiplier_sl = 1.2
                atr_multiplier_tp = 2.5
                ml_threshold_min = 0.4
                liquidity_min = 5

            # Ajustar basado en volumen
            volume_ratio = data['volume'].iloc[-1] / avg_volume
            if volume_ratio > 1.5:  # Alto volumen
                liquidity_min *= 0.8  # Reducir requerimiento de liquidez
                print("üíπ Alto volumen detectado - relajando filtros de liquidez")

            # Ajustar basado en tendencia
            recent_trend = data['close'].tail(10).pct_change().sum()
            if abs(recent_trend) < 0.005:  # Mercado lateral
                ml_threshold_min += 0.05  # Requerir m√°s confianza ML
                print("üîÑ Mercado lateral detectado - aumentando umbral ML")

            # Par√°metros finales
            optimized_params = {
                'atr_period': 14,
                'stop_loss_atr_multiplier': round(atr_multiplier_sl, 2),
                'take_profit_atr_multiplier': round(atr_multiplier_tp, 2),
                'min_rr_ratio': 2.5,
                'risk_per_trade': round(risk_per_trade, 4),
                'max_concurrent_trades': 3,
                'ml_threshold_min': round(ml_threshold_min, 2),
                'ml_threshold_max': 0.8,
                'liquidity_score_min': round(liquidity_min, 1)
            }

            print("\n‚úÖ PAR√ÅMETROS OPTIMIZADOS:")
            for key, value in optimized_params.items():
                print(f"  {key}: {value}")

            return optimized_params

        except Exception as e:
            print(f"‚ùå Error calculando par√°metros: {e}")
            return None

    def apply_optimized_parameters(self, optimized_params):
        """Aplicar par√°metros optimizados a la configuraci√≥n"""
        try:
            print("\nüíæ APLICANDO PAR√ÅMETROS OPTIMIZADOS")
            print("=" * 40)

            # Leer configuraci√≥n actual
            config_path = Path("descarga_datos/config/config.yaml")

            if not config_path.exists():
                print("‚ùå Archivo de configuraci√≥n no encontrado")
                return False

            import yaml

            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)

            # Actualizar secci√≥n de backtesting
            if 'backtesting' not in config:
                config['backtesting'] = {}

            if 'optimized_parameters' not in config['backtesting']:
                config['backtesting']['optimized_parameters'] = {}

            # Aplicar par√°metros optimizados
            config['backtesting']['optimized_parameters'].update(optimized_params)

            # Guardar configuraci√≥n
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True)

            print(f"‚úÖ Configuraci√≥n actualizada en {config_path}")
            print("üí° Reinicia el sistema de trading para usar los nuevos par√°metros")

            return True

        except Exception as e:
            print(f"‚ùå Error aplicando par√°metros: {e}")
            return False

async def main():
    print("üî¨ OPTIMIZACI√ìN CON DATOS DE MERCADO LIVE")
    print("=" * 50)

    optimizer = SimpleLiveOptimizer()

    # Paso 1: Inicializar conexi√≥n
    print("\n1Ô∏è‚É£ INICIALIZANDO CONEXI√ìN...")
    if not await optimizer.initialize_provider():
        print("‚ùå Fall√≥ inicializaci√≥n")
        return False

    # Paso 2: Descargar datos live
    print("\n2Ô∏è‚É£ DESCARGANDO DATOS LIVE...")
    live_data = await optimizer.download_live_data(bars=300)

    if live_data is None:
        print("‚ùå Fall√≥ descarga de datos")
        return False

    # Paso 3: Analizar datos y calcular par√°metros optimizados
    print("\n3Ô∏è‚É£ ANALIZANDO DATOS Y OPTIMIZANDO PAR√ÅMETROS...")
    optimized_params = optimizer.analyze_live_data(live_data)

    if optimized_params is None:
        print("‚ùå Fall√≥ an√°lisis y optimizaci√≥n")
        return False

    # Paso 4: Aplicar par√°metros optimizados
    print("\n4Ô∏è‚É£ APLICANDO PAR√ÅMETROS OPTIMIZADOS...")
    if not optimizer.apply_optimized_parameters(optimized_params):
        print("‚ùå Fall√≥ aplicaci√≥n de par√°metros")
        return False

    print("\n‚úÖ OPTIMIZACI√ìN LIVE COMPLETADA EXITOSAMENTE")
    print("üí° Par√°metros optimizados aplicados al sistema")
    print("üí° Ejecuta: python descarga_datos/main.py --live-ccxt")
    print("üí° Para probar los nuevos par√°metros en modo live")

    return True

if __name__ == "__main__":
    asyncio.run(main())