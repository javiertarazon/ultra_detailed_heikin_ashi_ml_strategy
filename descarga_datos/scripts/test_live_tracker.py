#!/usr/bin/env python3
"""
Script de prueba para el sistema de Live Trading Tracker.

Este script prueba todas las funcionalidades del LiveTradingTracker
con datos simulados para verificar que las m√©tricas profesionales
se calculan correctamente.
"""

import sys
import os
from pathlib import Path
from datetime import datetime, timedelta
import random

# Agregar el directorio ra√≠z al path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from utils.live_trading_tracker import LiveTradingTracker

def generate_sample_trades(num_trades=20):
    """
    Genera operaciones de ejemplo para testing.

    Args:
        num_trades: N√∫mero de operaciones a generar

    Returns:
        Lista de diccionarios con datos de trades
    """
    trades = []
    symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT']
    base_time = datetime.now() - timedelta(days=7)

    for i in range(num_trades):
        symbol = random.choice(symbols)
        side = random.choice(['buy', 'sell'])

        # Generar precios realistas
        if symbol == 'BTC/USDT':
            entry_price = random.uniform(105000, 111000)
            exit_price = entry_price * random.uniform(0.95, 1.05)  # -5% a +5%
        elif symbol == 'ETH/USDT':
            entry_price = random.uniform(3200, 3800)
            exit_price = entry_price * random.uniform(0.95, 1.05)
        else:  # ADA/USDT
            entry_price = random.uniform(0.8, 1.2)
            exit_price = entry_price * random.uniform(0.95, 1.05)

        # Calcular P&L
        quantity = random.uniform(0.1, 2.0) if symbol == 'BTC/USDT' else random.uniform(1, 10)
        if side == 'buy':
            pnl = (exit_price - entry_price) * quantity
        else:
            pnl = (entry_price - exit_price) * quantity

        trade = {
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'quantity': quantity,
            'pnl': pnl,
            'open_time': base_time + timedelta(hours=i*2),
            'close_time': base_time + timedelta(hours=i*2 + random.uniform(1, 24)),
            'exit_reason': random.choice(['take_profit', 'stop_loss', 'trailing_stop', 'manual'])
        }

        trades.append(trade)

    return trades

def test_live_trading_tracker():
    """
    Funci√≥n principal de testing del LiveTradingTracker.
    """
    print("üß™ PRUEBA DEL SISTEMA LIVE TRADING TRACKER")
    print("=" * 60)

    # Inicializar tracker
    initial_balance = 100000.0
    tracker = LiveTradingTracker(initial_balance=initial_balance)

    print(f"‚úÖ Tracker inicializado con balance: ${initial_balance:,.2f}")

    # Generar y agregar trades de prueba
    print("\nüìä GENERANDO OPERACIONES DE PRUEBA...")
    sample_trades = generate_sample_trades(25)

    for i, trade in enumerate(sample_trades, 1):
        tracker.add_trade(trade)
        if i % 5 == 0:
            print(f"   ‚û§ Agregadas {i} operaciones...")

    print(f"‚úÖ {len(sample_trades)} operaciones agregadas exitosamente")

    # Obtener m√©tricas completas
    print("\nüìà M√âTRICAS PROFESIONALES CALCULADAS:")
    print("-" * 60)

    metrics = tracker.get_comprehensive_metrics()

    # M√©tricas b√°sicas
    print("üéØ M√âTRICAS B√ÅSICAS:")
    print(f"   ‚Ä¢ Total de operaciones: {metrics['total_trades']}")
    print(f"   ‚Ä¢ Operaciones ganadoras: {metrics['winning_trades']}")
    print(f"   ‚Ä¢ Operaciones perdedoras: {metrics['losing_trades']}")
    print(".1f")
    print(".2f")
    print(".2f")

    # Balance y capital
    print("\nüí∞ BALANCE Y CAPITAL:")
    print(".2f")
    print(".2f")
    print(".2f")
    print(".2f")
    print(".2f")

    # M√©tricas de riesgo
    print("\nüìâ M√âTRICAS DE RIESGO:")
    print(".2f")
    print(".2f")

    # M√©tricas avanzadas
    print("\nüé≤ M√âTRICAS AVANZADAS:")
    print(".2f")
    print(".2f")
    print(".2f")
    print(".2f")
    print(".2f")
    print(".2f")

    # Estad√≠sticas adicionales
    print("\nüìä ESTAD√çSTICAS ADICIONALES:")
    print(".2f")
    print(".2f")
    print(".2f")
    print(".2f")
    print(".1f")

    # Informaci√≥n temporal
    print("\n‚è∞ INFORMACI√ìN TEMPORAL:")
    print(f"   ‚Ä¢ Tiempo de ejecuci√≥n: {metrics['runtime_minutes']:.1f} minutos")
    print(f"   ‚Ä¢ Inicio: {metrics['start_time']}")
    print(f"   ‚Ä¢ √öltima actualizaci√≥n: {metrics['last_update']}")

    # Guardar estado
    print("\nüíæ GUARDANDO ESTADO...")
    results_dir = Path(__file__).parent.parent / "data" / "live_trading_results"
    results_dir.mkdir(parents=True, exist_ok=True)
    test_filename = f"test_tracker_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    test_filepath = results_dir / test_filename

    tracker.save_to_file(str(test_filepath))
    print(f"‚úÖ Estado guardado en: {test_filepath}")

    # Probar carga de estado
    print("\nüìÇ PROBANDO CARGA DE ESTADO...")
    new_tracker = LiveTradingTracker(initial_balance=initial_balance)
    if new_tracker.load_from_file(str(test_filepath)):
        new_metrics = new_tracker.get_comprehensive_metrics()
        if abs(new_metrics['total_pnl'] - metrics['total_pnl']) < 0.01:
            print("‚úÖ Carga de estado exitosa - m√©tricas coinciden")
        else:
            print("‚ùå Error en carga de estado - m√©tricas no coinciden")
    else:
        print("‚ùå Error cargando estado")

    # Verificaci√≥n final
    print("\nüéØ VERIFICACI√ìN FINAL:")
    print(f"   ‚Ä¢ Trades en historial: {len(tracker.trades_history)}")
    print(f"   ‚Ä¢ Puntos en equity curve: {len(tracker.equity_curve)}")
    print(f"   ‚Ä¢ Archivo guardado: {test_filepath.exists()}")

    print("\nüèÜ PRUEBA COMPLETADA EXITOSAMENTE!")
    print("=" * 60)

    return metrics

if __name__ == "__main__":
    # Ejecutar prueba
    metrics = test_live_trading_tracker()

    # Mostrar resumen final
    print("\nüìã RESUMEN EJECUTIVO:")
    print(f"‚Ä¢ Sistema de tracking: ‚úÖ Funcional")
    print(f"‚Ä¢ M√©tricas profesionales: ‚úÖ Calculadas")
    print(f"‚Ä¢ Persistencia de datos: ‚úÖ Implementada")
    print(f"‚Ä¢ Total P&L generado: ${metrics['total_pnl']:,.2f}")
    print(f"‚Ä¢ Win Rate alcanzado: {metrics['win_rate']*100:.1f}%")
    print(f"‚Ä¢ Profit Factor: {metrics['profit_factor']:.2f}")
    print("\nüöÄ Sistema listo para LIVE TRADING!")