#!/usr/bin/env python3

"""
M√≥dulo de logging centralizado para el data downloader.
Configura el logging basado en la configuraci√≥n proporcionada.
"""

import logging
import os
from typing import Optional, Dict, Any
from datetime import datetime
import re
import sys
import time



def sanitize_message(message: str) -> str:
    """
    Sanitiza mensajes de logging reemplazando caracteres Unicode problem√°ticos
    con alternativas ASCII para compatibilidad con Windows/cp1252.
    """
    # Reemplazar emojis comunes con alternativas ASCII
    emoji_map = {
        'üîç': '[SEARCH]',
        'üìã': '[CLIPBOARD]',
        '‚úÖ': '[OK]',
        '‚ö†Ô∏è': '[WARN]',
        '‚ùå': '[ERROR]',
        'üöÄ': '[START]',
        'üí∞': '[MONEY]',
        'üìä': '[CHART]',
        'üéØ': '[TARGET]',
        '‚èπÔ∏è': '[STOP]',
        'üîÑ': '[SYNC]',
        'üì•': '[DOWNLOAD]',
        'üìà': '[UP]',
        'üìâ': '[DOWN]',
        'üî¢': '[NUMBERS]',
        'üí°': '[IDEA]',
        'üß™': '[TEST]',
        'üõ†Ô∏è': '[TOOLS]',
        'üìù': '[NOTE]',
        'üîß': '[CONFIG]',
        'Ô∏è': '[FOLDER]',
        'üìÑ': '[FILE]',
        'üîó': '[LINK]',
        '‚öôÔ∏è': '[SETTINGS]',
        'üéõÔ∏è': '[CONTROL]',
        'üíæ': '[SAVE]'
    }

    result = message
    for emoji, replacement in emoji_map.items():
        result = result.replace(emoji, replacement)

    # Reemplazar cualquier otro car√°cter Unicode no ASCII
    result = re.sub(r'[^\x00-\x7F]+', '?', result)

    return result

class SafeFormatter(logging.Formatter):
    """
    Formatter personalizado que sanitiza mensajes para evitar errores Unicode en Windows.
    """

    def format(self, record):
        # Sanitizar el mensaje antes de formatear
        if isinstance(record.msg, str):
            record.msg = sanitize_message(record.msg)

        # Tambi√©n sanitizar args si contienen strings
        if record.args:
            sanitized_args = []
            for arg in record.args:
                if isinstance(arg, str):
                    sanitized_args.append(sanitize_message(arg))
                else:
                    sanitized_args.append(arg)
            record.args = tuple(sanitized_args)

        return super().format(record)

def setup_logging(log_level: str = "INFO", log_file: str = "logs/bot_trader.log") -> None:
    """
    Configura el sistema de logging con par√°metros simples.
    FUNCI√ìN PRINCIPAL para inicializar el sistema de logging global.
    Debe ser llamada al inicio de la aplicaci√≥n en main.py.

    Args:
        log_level: Nivel de logging (DEBUG, INFO, WARNING, ERROR)
        log_file: Ruta del archivo de log
    """
    # Crear directorio de logs si no existe
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # Configurar el nivel de logging
    level = getattr(logging, log_level.upper(), logging.INFO)

    # Configurar el logger root
    root_logger = logging.getLogger()
    root_logger.setLevel(level)

    # Limpiar handlers existentes
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # Crear formatter seguro
    formatter = SafeFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # Handler para consola
    console_handler = logging.StreamHandler()
    console_handler.setLevel(level)
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)

    # Handler para archivo si se especifica
    if log_file:
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(level)
        file_handler.setFormatter(formatter)
        root_logger.addHandler(file_handler)

def setup_logger(name: str, log_level: str = "INFO", log_file: str = "logs/bot_trader.log") -> logging.Logger:
    """
    Configura un logger espec√≠fico con un nombre para un componente.

    Args:
        name: Nombre del logger (normalmente el nombre del componente)
        log_level: Nivel de logging (DEBUG, INFO, WARNING, ERROR)
        log_file: Ruta del archivo de log

    Returns:
        Un logger configurado
    """
    # Configurar el nivel de logging
    level = getattr(logging, log_level.upper(), logging.INFO)

    # Crear logger
    logger = logging.getLogger(name)
    logger.setLevel(level)

    # Si el logger root ya est√° configurado (tiene handlers), no agregar handlers propios
    # para evitar duplicaci√≥n. Los mensajes se propagar√°n al root autom√°ticamente.
    root_logger = logging.getLogger()
    if root_logger.handlers:
        # Logger root configurado - usar propagaci√≥n
        logger.propagate = True
        return logger

    # Si no hay configuraci√≥n root, configurar handlers locales (legacy compatibility)
    # Verificar si ya tiene handlers para evitar duplicados
    if not logger.handlers:
        # Crear directorio de logs si no existe
        log_dir = os.path.dirname(log_file)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir)
            
        # Crear formatter seguro
        formatter = SafeFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

        # Configurar handler de archivo
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

        # Configurar handler de consola
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        # No propagar si tiene handlers propios
        logger.propagate = False

    return logger

def get_logger(name: str, log_level: str = "INFO", log_file: str = "logs/bot_trader.log") -> logging.Logger:
    """
    Obtiene un logger con el nombre especificado.
    Esta funci√≥n es un alias para setup_logger y debe usarse en todo el sistema.
    
    Args:
        name: Nombre del logger, usualmente __name__ del m√≥dulo.
        log_level: Nivel de logging (DEBUG, INFO, WARNING, ERROR)
        log_file: Ruta del archivo de log
        
    Returns:
        Instancia de Logger configurada.
    """
    return setup_logger(name, log_level, log_file)


def initialize_system_logging(config: Optional[Dict[str, Any]] = None) -> None:
    """
    Inicializa el sistema de logging global seg√∫n la configuraci√≥n proporcionada.
    Esta funci√≥n debe ser llamada UNA SOLA VEZ al inicio de la aplicaci√≥n.

    Args:
        config: Configuraci√≥n de logging. Si es None, se usar√° la configuraci√≥n por defecto.
               Formato esperado: {'level': 'INFO', 'file': 'logs/bot_trader.log'}
    """
    if config is None:
        config = {'level': 'INFO', 'file': 'logs/bot_trader.log'}
    
    log_level = config.get('level', 'INFO').upper()
    log_file = config.get('file', 'logs/bot_trader.log')
    
    # Verificar si el directorio de logs existe, si no, crearlo
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # Configurar el logging global
    setup_logging(log_level, log_file)
    
    # Crear un logger principal para el sistema
    logger = logging.getLogger('system')
    logger.info(f"Sistema de logging inicializado: nivel={log_level}, archivo={log_file}")
    logger.info(f"Fecha/hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"Python: {sys.version}")
    logger.info(f"Sistema operativo: {sys.platform}")
    
    # Registrar el tiempo de inicio para calcular duraci√≥n de ejecuci√≥n
    global _start_time
    _start_time = time.time()


# Variable global para calcular duraci√≥n de ejecuci√≥n
_start_time = None

def log_action(action_name: str = None, log_level: str = "info"):
    """
    Decorador para logging autom√°tico de acciones.
    
    Args:
        action_name: Nombre de la acci√≥n (si None, usa el nombre de la funci√≥n)
        log_level: Nivel de logging ('debug', 'info', 'warning', 'error')
    
    Ejemplo:
        @log_action("procesando_datos")
        def process_data(data):
            return data * 2
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            # Obtener nombre de la acci√≥n
            name = action_name or func.__name__
            
            # Crear logger
            logger = logging.getLogger(func.__module__)
            
            # Log de inicio
            start_msg = f"üöÄ Iniciando: {name}"
            getattr(logger, log_level)(start_msg)
            
            start_time = time.time()
            
            try:
                # Ejecutar funci√≥n
                result = func(*args, **kwargs)
                
                # Calcular duraci√≥n
                duration = time.time() - start_time
                
                # Log de √©xito
                success_msg = f"‚úÖ Completado: {name} ({duration:.2f}s)"
                getattr(logger, log_level)(success_msg)
                
                return result
                
            except Exception as e:
                # Calcular duraci√≥n
                duration = time.time() - start_time
                
                # Log de error
                error_msg = f"‚ùå Error en {name}: {str(e)} ({duration:.2f}s)"
                logger.error(error_msg)
                
                # Re-lanzar la excepci√≥n
                raise e
        
        return wrapper
    return decorator